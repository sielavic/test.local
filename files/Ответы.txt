1)словари, в отличие от списков, не упорядочены. Словари полезны, если вы хотите связать каждое значение с какой-нибудь меткой — ключом. А если вы храните похожие значения, например, цены или имена, которым не можете назначить уникальные ключи, лучше использовать списки
2)функция join в Python и оператор «+»
3)Оператор pass используется в Python, когда синтаксически требуется наличие какого-то оператора или выражения, но вам не нужно выполнение любых действий. Оператор pass является Null -операций – т. е. он возвращает Null , когда выполняется.
4)Срезы позволяют обрезать список, взяв лишь те элементы, которые нужны. Они работают по следующей схеме: list[НАЧАЛО:КОНЕЦ:ШАГ] . Начало - с какого элемента стоит начать (по умолчанию равно 0); Конец - по какой элемент мы берем элементы (по умолчанию равно длине списка);
5)В Python лямбда-выражение позволяет создавать анонимные функции - функции, которые не привязаны к имени. В анонимной функции: может содержаться только одно выражение могут передаваться сколько угодно аргументов
6)extend() добавляет новые элементы в конец списка, но, в отличие от append(), принимает в качестве параметров итерируемые объекты: списки, кортежи и строки.Метод extend итерирует элементы в итерабельном объекте, а затем добавляет их по одному в конец списка
7)Говоря простым языком, модуль в Python это  просто файл, содержащий код на Python. Каждый модуль в Python может содержать переменные, объявления классов и функций. Кроме того, в модуле может находиться исполняемый код.Модуль csv - чтение и запись CSV файлов.Модуль shutil.Модуль unittest: тестируем свои программы.Модуль subprocess
Модуль subprocess отвечает за выполнение следующих действий: порождение новых процессов, соединение c потоками стандартного ввода, стандартного вывода, стандартного вывода сообщений об ошибках и получение кодов возврата от этих процессов.Модуль fractions
Модуль fractions предоставляет поддержку рациональных чисел.Модуль cmath
Модуль cmath – предоставляет функции для работы с комплексными числами.Модуль glob.Модуль copy - поверхностное и глубокое копирование объектов.Модуль functools.Модуль os.path
8)self в Python - это не метод, а специальный параметр, который передается первым аргументом в метод класса и представляет собой ссылку на экземпляр класса.Когда объекты создаются, сам объект передается в параметр self.
9)циклы  while используются для выполнения одной и той же задачи несколько раз, а циклы for — один раз над данными списка
10)append(item): добавляет элемент item в конец списка

insert(index, item): добавляет элемент item в список по индексу index

extend(items): добавляет набор элементов items в конец списка

remove(item): удаляет элемент item. Удаляется только первое вхождение элемента. Если элемент не найден, генерирует исключение ValueError

clear(): удаление всех элементов из списка

index(item): возвращает индекс элемента item. Если элемент не найден, генерирует исключение ValueError

pop([index]): удаляет и возвращает элемент по индексу index. Если индекс не передан, то просто удаляет последний элемент.

count(item): возвращает количество вхождений элемента item в список

sort([key]): сортирует элементы. По умолчанию сортирует по возрастанию. Но с помощью параметра key мы можем передать функцию сортировки.

reverse(): расставляет все элементы в списке в обратном порядке

copy(): копирует список

Кроме того, Python предоставляет ряд встроенных функций для работы со списками:

len(list): возвращает длину списка

sorted(list, [key]): возвращает отсортированный список

min(list): возвращает наименьший элемент списка

max(list): возвращает наибольший элемент списка

11) a = [1, 2, 3, 4, 5]
    a.reverse()
    print(a)
12)Мы можем использовать встроенную функцию set() для преобразования списка в набор, а затем использовать функцию list(), чтобы преобразовать его обратно в список.

ints_list = [1, 2, 3, 4, 3, 2]
 ints_list1 = list(set(ints_list))
 print(ints_list1)
13)GET передает данные в адресной строке
Метод GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.

HEAD
HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.

POST передает данные в теле запроса
POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.

PUT
PUT заменяет все текущие представления ресурса данными запроса.

DELETE
DELETE удаляет указанный ресурс.

CONNECT
CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.

OPTIONS
OPTIONS используется для описания параметров соединения с ресурсом.

TRACE
TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.

PATCH
PATCH используется для частичного изменения ресурса.
14)Запросы (HTTP Requests) — сообщения, которые отправляются клиентом на сервер, чтобы вызвать выполнение некоторых действий. Зачастую для получения доступа к определенному ресурсу. Основой запроса является HTTP-заголовок.
Ответы (HTTP Responses) — сообщения, которые сервер отправляет в ответ на клиентский запрос.
В целом, как запросы HTTP, так и ответы имеют следующую структуру:

Стартовая строка (start line) — используется для описания версии используемого протокола и другой информации — вроде запрашиваемого ресурса или кода ответа. Как можно понять из названия, ее содержимое занимает ровно одну строчку.
HTTP-заголовки (HTTP Headers) — несколько строчек текста в определенном формате, которые либо уточняют запрос, либо описывают содержимое тела сообщения.
Пустая строка, которая сообщает, что все метаданные для конкретного запроса или ответа были отправлены.
Опциональное тело сообщения, которое содержит данные, связанные с запросом, либо документ (например HTML-страницу), передаваемый в  ответе.
15)API (Application programming interface) — это контракт, который предоставляет программа. «Ко мне можно обращаться так и так, я обязуюсь делать то и это».

Если переводить на русский, это было бы слово «договор». Договор между двумя сторонами, как договор на покупку машины
